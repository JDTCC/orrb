// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: orrb/protos/RenderService.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Orrb {

  /// <summary>Holder for reflection information generated from orrb/protos/RenderService.proto</summary>
  public static partial class RenderServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for orrb/protos/RenderService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RenderServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9vcnJiL3Byb3Rvcy9SZW5kZXJTZXJ2aWNlLnByb3RvEgRvcnJiGiBvcnJi",
            "L3Byb3Rvcy9SZW5kZXJlckNvbmZpZy5wcm90byLXAgoSUmVuZGVyQmF0Y2hS",
            "ZXF1ZXN0EjsKB2VudHJpZXMYASADKAsyKi5vcnJiLlJlbmRlckJhdGNoUmVx",
            "dWVzdC5CYXRjaFJlcXVlc3RFbnRyeRINCgV3aWR0aBgCIAEoBRIOCgZoZWln",
            "aHQYAyABKAUSEAoIc2NlbmVfaWQYBCABKAUSFAoMY2FtZXJhX25hbWVzGAUg",
            "AygJEhIKCmJhdGNoX3NlZWQYBiABKAUSFwoPdXNlX2VudHJ5X3NlZWRzGAcg",
            "ASgIEhQKDHJlbmRlcl9hbHBoYRgIIAEoCBIUCgxyZW5kZXJfZGVwdGgYCSAB",
            "KAgSFgoOcmVuZGVyX25vcm1hbHMYCiABKAgSGwoTcmVuZGVyX3NlZ21lbnRh",
            "dGlvbhgLIAEoCBovChFCYXRjaFJlcXVlc3RFbnRyeRIMCgRxcG9zGAEgAygC",
            "EgwKBHNlZWQYAiABKAUiyQUKE1JlbmRlckJhdGNoUmVzcG9uc2USNgoHc3Ry",
            "ZWFtcxgBIAMoCzIlLm9ycmIuUmVuZGVyQmF0Y2hSZXNwb25zZS5TdHJlYW1F",
            "bnRyeRJSChZhdXhpbGlhcnlfYm9vbF9zdHJlYW1zGAIgAygLMjIub3JyYi5S",
            "ZW5kZXJCYXRjaFJlc3BvbnNlLkF1eGlsaWFyeUJvb2xTdHJlYW1FbnRyeRJQ",
            "ChVhdXhpbGlhcnlfaW50X3N0cmVhbXMYAyADKAsyMS5vcnJiLlJlbmRlckJh",
            "dGNoUmVzcG9uc2UuQXV4aWxpYXJ5SW50U3RyZWFtRW50cnkSVAoXYXV4aWxp",
            "YXJ5X2Zsb2F0X3N0cmVhbXMYBCADKAsyMy5vcnJiLlJlbmRlckJhdGNoUmVz",
            "cG9uc2UuQXV4aWxpYXJ5RmxvYXRTdHJlYW1FbnRyeRrVAQoLU3RyZWFtRW50",
            "cnkSDAoEbmFtZRgBIAEoCRJJCgdlbnRyaWVzGAIgAygLMjgub3JyYi5SZW5k",
            "ZXJCYXRjaFJlc3BvbnNlLlN0cmVhbUVudHJ5LkJhdGNoUmVzcG9uc2VFbnRy",
            "eRptChJCYXRjaFJlc3BvbnNlRW50cnkSEgoKaW1hZ2VfZGF0YRgBIAEoDBIS",
            "CgpkZXB0aF9kYXRhGAIgASgMEhQKDG5vcm1hbHNfZGF0YRgDIAEoDBIZChFz",
            "ZWdtZW50YXRpb25fZGF0YRgEIAEoDBo2ChhBdXhpbGlhcnlCb29sU3RyZWFt",
            "RW50cnkSDAoEbmFtZRgBIAEoCRIMCgRkYXRhGAIgAygIGjUKF0F1eGlsaWFy",
            "eUludFN0cmVhbUVudHJ5EgwKBG5hbWUYASABKAkSDAoEZGF0YRgCIAMoBRo3",
            "ChlBdXhpbGlhcnlGbG9hdFN0cmVhbUVudHJ5EgwKBG5hbWUYASABKAkSDAoE",
            "ZGF0YRgCIAMoAiI8Cg1VcGRhdGVSZXF1ZXN0EisKCmNvbXBvbmVudHMYASAD",
            "KAsyFy5vcnJiLlJlbmRlcmVyQ29tcG9uZW50IiAKDlVwZGF0ZVJlc3BvbnNl",
            "Eg4KBmVycm9ycxgBIAMoCTKMAQoNUmVuZGVyU2VydmljZRJECgtSZW5kZXJC",
            "YXRjaBIYLm9ycmIuUmVuZGVyQmF0Y2hSZXF1ZXN0Ghkub3JyYi5SZW5kZXJC",
            "YXRjaFJlc3BvbnNlIgASNQoGVXBkYXRlEhMub3JyYi5VcGRhdGVSZXF1ZXN0",
            "GhQub3JyYi5VcGRhdGVSZXNwb25zZSIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Orrb.RendererConfigReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchRequest), global::Orrb.RenderBatchRequest.Parser, new[]{ "Entries", "Width", "Height", "SceneId", "CameraNames", "BatchSeed", "UseEntrySeeds", "RenderAlpha", "RenderDepth", "RenderNormals", "RenderSegmentation" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchRequest.Types.BatchRequestEntry), global::Orrb.RenderBatchRequest.Types.BatchRequestEntry.Parser, new[]{ "Qpos", "Seed" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse), global::Orrb.RenderBatchResponse.Parser, new[]{ "Streams", "AuxiliaryBoolStreams", "AuxiliaryIntStreams", "AuxiliaryFloatStreams" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse.Types.StreamEntry), global::Orrb.RenderBatchResponse.Types.StreamEntry.Parser, new[]{ "Name", "Entries" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry), global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry.Parser, new[]{ "ImageData", "DepthData", "NormalsData", "SegmentationData" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry), global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry.Parser, new[]{ "Name", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry), global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry.Parser, new[]{ "Name", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry), global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry.Parser, new[]{ "Name", "Data" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.UpdateRequest), global::Orrb.UpdateRequest.Parser, new[]{ "Components" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Orrb.UpdateResponse), global::Orrb.UpdateResponse.Parser, new[]{ "Errors" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RenderBatchRequest : pb::IMessage<RenderBatchRequest> {
    private static readonly pb::MessageParser<RenderBatchRequest> _parser = new pb::MessageParser<RenderBatchRequest>(() => new RenderBatchRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderBatchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orrb.RenderServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchRequest(RenderBatchRequest other) : this() {
      entries_ = other.entries_.Clone();
      width_ = other.width_;
      height_ = other.height_;
      sceneId_ = other.sceneId_;
      cameraNames_ = other.cameraNames_.Clone();
      batchSeed_ = other.batchSeed_;
      useEntrySeeds_ = other.useEntrySeeds_;
      renderAlpha_ = other.renderAlpha_;
      renderDepth_ = other.renderDepth_;
      renderNormals_ = other.renderNormals_;
      renderSegmentation_ = other.renderSegmentation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchRequest Clone() {
      return new RenderBatchRequest(this);
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Orrb.RenderBatchRequest.Types.BatchRequestEntry> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(10, global::Orrb.RenderBatchRequest.Types.BatchRequestEntry.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RenderBatchRequest.Types.BatchRequestEntry> entries_ = new pbc::RepeatedField<global::Orrb.RenderBatchRequest.Types.BatchRequestEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RenderBatchRequest.Types.BatchRequestEntry> Entries {
      get { return entries_; }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 2;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "scene_id" field.</summary>
    public const int SceneIdFieldNumber = 4;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "camera_names" field.</summary>
    public const int CameraNamesFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_cameraNames_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> cameraNames_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> CameraNames {
      get { return cameraNames_; }
    }

    /// <summary>Field number for the "batch_seed" field.</summary>
    public const int BatchSeedFieldNumber = 6;
    private int batchSeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BatchSeed {
      get { return batchSeed_; }
      set {
        batchSeed_ = value;
      }
    }

    /// <summary>Field number for the "use_entry_seeds" field.</summary>
    public const int UseEntrySeedsFieldNumber = 7;
    private bool useEntrySeeds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseEntrySeeds {
      get { return useEntrySeeds_; }
      set {
        useEntrySeeds_ = value;
      }
    }

    /// <summary>Field number for the "render_alpha" field.</summary>
    public const int RenderAlphaFieldNumber = 8;
    private bool renderAlpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderAlpha {
      get { return renderAlpha_; }
      set {
        renderAlpha_ = value;
      }
    }

    /// <summary>Field number for the "render_depth" field.</summary>
    public const int RenderDepthFieldNumber = 9;
    private bool renderDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderDepth {
      get { return renderDepth_; }
      set {
        renderDepth_ = value;
      }
    }

    /// <summary>Field number for the "render_normals" field.</summary>
    public const int RenderNormalsFieldNumber = 10;
    private bool renderNormals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderNormals {
      get { return renderNormals_; }
      set {
        renderNormals_ = value;
      }
    }

    /// <summary>Field number for the "render_segmentation" field.</summary>
    public const int RenderSegmentationFieldNumber = 11;
    private bool renderSegmentation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RenderSegmentation {
      get { return renderSegmentation_; }
      set {
        renderSegmentation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderBatchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderBatchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!entries_.Equals(other.entries_)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (SceneId != other.SceneId) return false;
      if(!cameraNames_.Equals(other.cameraNames_)) return false;
      if (BatchSeed != other.BatchSeed) return false;
      if (UseEntrySeeds != other.UseEntrySeeds) return false;
      if (RenderAlpha != other.RenderAlpha) return false;
      if (RenderDepth != other.RenderDepth) return false;
      if (RenderNormals != other.RenderNormals) return false;
      if (RenderSegmentation != other.RenderSegmentation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= entries_.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      hash ^= cameraNames_.GetHashCode();
      if (BatchSeed != 0) hash ^= BatchSeed.GetHashCode();
      if (UseEntrySeeds != false) hash ^= UseEntrySeeds.GetHashCode();
      if (RenderAlpha != false) hash ^= RenderAlpha.GetHashCode();
      if (RenderDepth != false) hash ^= RenderDepth.GetHashCode();
      if (RenderNormals != false) hash ^= RenderNormals.GetHashCode();
      if (RenderSegmentation != false) hash ^= RenderSegmentation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      entries_.WriteTo(output, _repeated_entries_codec);
      if (Width != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (SceneId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SceneId);
      }
      cameraNames_.WriteTo(output, _repeated_cameraNames_codec);
      if (BatchSeed != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BatchSeed);
      }
      if (UseEntrySeeds != false) {
        output.WriteRawTag(56);
        output.WriteBool(UseEntrySeeds);
      }
      if (RenderAlpha != false) {
        output.WriteRawTag(64);
        output.WriteBool(RenderAlpha);
      }
      if (RenderDepth != false) {
        output.WriteRawTag(72);
        output.WriteBool(RenderDepth);
      }
      if (RenderNormals != false) {
        output.WriteRawTag(80);
        output.WriteBool(RenderNormals);
      }
      if (RenderSegmentation != false) {
        output.WriteRawTag(88);
        output.WriteBool(RenderSegmentation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += entries_.CalculateSize(_repeated_entries_codec);
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      size += cameraNames_.CalculateSize(_repeated_cameraNames_codec);
      if (BatchSeed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BatchSeed);
      }
      if (UseEntrySeeds != false) {
        size += 1 + 1;
      }
      if (RenderAlpha != false) {
        size += 1 + 1;
      }
      if (RenderDepth != false) {
        size += 1 + 1;
      }
      if (RenderNormals != false) {
        size += 1 + 1;
      }
      if (RenderSegmentation != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderBatchRequest other) {
      if (other == null) {
        return;
      }
      entries_.Add(other.entries_);
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      cameraNames_.Add(other.cameraNames_);
      if (other.BatchSeed != 0) {
        BatchSeed = other.BatchSeed;
      }
      if (other.UseEntrySeeds != false) {
        UseEntrySeeds = other.UseEntrySeeds;
      }
      if (other.RenderAlpha != false) {
        RenderAlpha = other.RenderAlpha;
      }
      if (other.RenderDepth != false) {
        RenderDepth = other.RenderDepth;
      }
      if (other.RenderNormals != false) {
        RenderNormals = other.RenderNormals;
      }
      if (other.RenderSegmentation != false) {
        RenderSegmentation = other.RenderSegmentation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
          case 16: {
            Width = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 32: {
            SceneId = input.ReadInt32();
            break;
          }
          case 42: {
            cameraNames_.AddEntriesFrom(input, _repeated_cameraNames_codec);
            break;
          }
          case 48: {
            BatchSeed = input.ReadInt32();
            break;
          }
          case 56: {
            UseEntrySeeds = input.ReadBool();
            break;
          }
          case 64: {
            RenderAlpha = input.ReadBool();
            break;
          }
          case 72: {
            RenderDepth = input.ReadBool();
            break;
          }
          case 80: {
            RenderNormals = input.ReadBool();
            break;
          }
          case 88: {
            RenderSegmentation = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RenderBatchRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class BatchRequestEntry : pb::IMessage<BatchRequestEntry> {
        private static readonly pb::MessageParser<BatchRequestEntry> _parser = new pb::MessageParser<BatchRequestEntry>(() => new BatchRequestEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<BatchRequestEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Orrb.RenderBatchRequest.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatchRequestEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatchRequestEntry(BatchRequestEntry other) : this() {
          qpos_ = other.qpos_.Clone();
          seed_ = other.seed_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public BatchRequestEntry Clone() {
          return new BatchRequestEntry(this);
        }

        /// <summary>Field number for the "qpos" field.</summary>
        public const int QposFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_qpos_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> qpos_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Qpos {
          get { return qpos_; }
        }

        /// <summary>Field number for the "seed" field.</summary>
        public const int SeedFieldNumber = 2;
        private int seed_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Seed {
          get { return seed_; }
          set {
            seed_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as BatchRequestEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(BatchRequestEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!qpos_.Equals(other.qpos_)) return false;
          if (Seed != other.Seed) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= qpos_.GetHashCode();
          if (Seed != 0) hash ^= Seed.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          qpos_.WriteTo(output, _repeated_qpos_codec);
          if (Seed != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Seed);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += qpos_.CalculateSize(_repeated_qpos_codec);
          if (Seed != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seed);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(BatchRequestEntry other) {
          if (other == null) {
            return;
          }
          qpos_.Add(other.qpos_);
          if (other.Seed != 0) {
            Seed = other.Seed;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                qpos_.AddEntriesFrom(input, _repeated_qpos_codec);
                break;
              }
              case 16: {
                Seed = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class RenderBatchResponse : pb::IMessage<RenderBatchResponse> {
    private static readonly pb::MessageParser<RenderBatchResponse> _parser = new pb::MessageParser<RenderBatchResponse>(() => new RenderBatchResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenderBatchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orrb.RenderServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchResponse(RenderBatchResponse other) : this() {
      streams_ = other.streams_.Clone();
      auxiliaryBoolStreams_ = other.auxiliaryBoolStreams_.Clone();
      auxiliaryIntStreams_ = other.auxiliaryIntStreams_.Clone();
      auxiliaryFloatStreams_ = other.auxiliaryFloatStreams_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenderBatchResponse Clone() {
      return new RenderBatchResponse(this);
    }

    /// <summary>Field number for the "streams" field.</summary>
    public const int StreamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Orrb.RenderBatchResponse.Types.StreamEntry> _repeated_streams_codec
        = pb::FieldCodec.ForMessage(10, global::Orrb.RenderBatchResponse.Types.StreamEntry.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry> streams_ = new pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry> Streams {
      get { return streams_; }
    }

    /// <summary>Field number for the "auxiliary_bool_streams" field.</summary>
    public const int AuxiliaryBoolStreamsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry> _repeated_auxiliaryBoolStreams_codec
        = pb::FieldCodec.ForMessage(18, global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry> auxiliaryBoolStreams_ = new pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryBoolStreamEntry> AuxiliaryBoolStreams {
      get { return auxiliaryBoolStreams_; }
    }

    /// <summary>Field number for the "auxiliary_int_streams" field.</summary>
    public const int AuxiliaryIntStreamsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry> _repeated_auxiliaryIntStreams_codec
        = pb::FieldCodec.ForMessage(26, global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry> auxiliaryIntStreams_ = new pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryIntStreamEntry> AuxiliaryIntStreams {
      get { return auxiliaryIntStreams_; }
    }

    /// <summary>Field number for the "auxiliary_float_streams" field.</summary>
    public const int AuxiliaryFloatStreamsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry> _repeated_auxiliaryFloatStreams_codec
        = pb::FieldCodec.ForMessage(34, global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry> auxiliaryFloatStreams_ = new pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.AuxiliaryFloatStreamEntry> AuxiliaryFloatStreams {
      get { return auxiliaryFloatStreams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenderBatchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenderBatchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!streams_.Equals(other.streams_)) return false;
      if(!auxiliaryBoolStreams_.Equals(other.auxiliaryBoolStreams_)) return false;
      if(!auxiliaryIntStreams_.Equals(other.auxiliaryIntStreams_)) return false;
      if(!auxiliaryFloatStreams_.Equals(other.auxiliaryFloatStreams_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= streams_.GetHashCode();
      hash ^= auxiliaryBoolStreams_.GetHashCode();
      hash ^= auxiliaryIntStreams_.GetHashCode();
      hash ^= auxiliaryFloatStreams_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      streams_.WriteTo(output, _repeated_streams_codec);
      auxiliaryBoolStreams_.WriteTo(output, _repeated_auxiliaryBoolStreams_codec);
      auxiliaryIntStreams_.WriteTo(output, _repeated_auxiliaryIntStreams_codec);
      auxiliaryFloatStreams_.WriteTo(output, _repeated_auxiliaryFloatStreams_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += streams_.CalculateSize(_repeated_streams_codec);
      size += auxiliaryBoolStreams_.CalculateSize(_repeated_auxiliaryBoolStreams_codec);
      size += auxiliaryIntStreams_.CalculateSize(_repeated_auxiliaryIntStreams_codec);
      size += auxiliaryFloatStreams_.CalculateSize(_repeated_auxiliaryFloatStreams_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenderBatchResponse other) {
      if (other == null) {
        return;
      }
      streams_.Add(other.streams_);
      auxiliaryBoolStreams_.Add(other.auxiliaryBoolStreams_);
      auxiliaryIntStreams_.Add(other.auxiliaryIntStreams_);
      auxiliaryFloatStreams_.Add(other.auxiliaryFloatStreams_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            streams_.AddEntriesFrom(input, _repeated_streams_codec);
            break;
          }
          case 18: {
            auxiliaryBoolStreams_.AddEntriesFrom(input, _repeated_auxiliaryBoolStreams_codec);
            break;
          }
          case 26: {
            auxiliaryIntStreams_.AddEntriesFrom(input, _repeated_auxiliaryIntStreams_codec);
            break;
          }
          case 34: {
            auxiliaryFloatStreams_.AddEntriesFrom(input, _repeated_auxiliaryFloatStreams_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RenderBatchResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class StreamEntry : pb::IMessage<StreamEntry> {
        private static readonly pb::MessageParser<StreamEntry> _parser = new pb::MessageParser<StreamEntry>(() => new StreamEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<StreamEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Orrb.RenderBatchResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreamEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreamEntry(StreamEntry other) : this() {
          name_ = other.name_;
          entries_ = other.entries_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public StreamEntry Clone() {
          return new StreamEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "entries" field.</summary>
        public const int EntriesFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry> _repeated_entries_codec
            = pb::FieldCodec.ForMessage(18, global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry.Parser);
        private readonly pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry> entries_ = new pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Orrb.RenderBatchResponse.Types.StreamEntry.Types.BatchResponseEntry> Entries {
          get { return entries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as StreamEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(StreamEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!entries_.Equals(other.entries_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= entries_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          entries_.WriteTo(output, _repeated_entries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += entries_.CalculateSize(_repeated_entries_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(StreamEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          entries_.Add(other.entries_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                entries_.AddEntriesFrom(input, _repeated_entries_codec);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the StreamEntry message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class BatchResponseEntry : pb::IMessage<BatchResponseEntry> {
            private static readonly pb::MessageParser<BatchResponseEntry> _parser = new pb::MessageParser<BatchResponseEntry>(() => new BatchResponseEntry());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<BatchResponseEntry> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Orrb.RenderBatchResponse.Types.StreamEntry.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BatchResponseEntry() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BatchResponseEntry(BatchResponseEntry other) : this() {
              imageData_ = other.imageData_;
              depthData_ = other.depthData_;
              normalsData_ = other.normalsData_;
              segmentationData_ = other.segmentationData_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public BatchResponseEntry Clone() {
              return new BatchResponseEntry(this);
            }

            /// <summary>Field number for the "image_data" field.</summary>
            public const int ImageDataFieldNumber = 1;
            private pb::ByteString imageData_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString ImageData {
              get { return imageData_; }
              set {
                imageData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "depth_data" field.</summary>
            public const int DepthDataFieldNumber = 2;
            private pb::ByteString depthData_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString DepthData {
              get { return depthData_; }
              set {
                depthData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "normals_data" field.</summary>
            public const int NormalsDataFieldNumber = 3;
            private pb::ByteString normalsData_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString NormalsData {
              get { return normalsData_; }
              set {
                normalsData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            /// <summary>Field number for the "segmentation_data" field.</summary>
            public const int SegmentationDataFieldNumber = 4;
            private pb::ByteString segmentationData_ = pb::ByteString.Empty;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pb::ByteString SegmentationData {
              get { return segmentationData_; }
              set {
                segmentationData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as BatchResponseEntry);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(BatchResponseEntry other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (ImageData != other.ImageData) return false;
              if (DepthData != other.DepthData) return false;
              if (NormalsData != other.NormalsData) return false;
              if (SegmentationData != other.SegmentationData) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (ImageData.Length != 0) hash ^= ImageData.GetHashCode();
              if (DepthData.Length != 0) hash ^= DepthData.GetHashCode();
              if (NormalsData.Length != 0) hash ^= NormalsData.GetHashCode();
              if (SegmentationData.Length != 0) hash ^= SegmentationData.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (ImageData.Length != 0) {
                output.WriteRawTag(10);
                output.WriteBytes(ImageData);
              }
              if (DepthData.Length != 0) {
                output.WriteRawTag(18);
                output.WriteBytes(DepthData);
              }
              if (NormalsData.Length != 0) {
                output.WriteRawTag(26);
                output.WriteBytes(NormalsData);
              }
              if (SegmentationData.Length != 0) {
                output.WriteRawTag(34);
                output.WriteBytes(SegmentationData);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (ImageData.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(ImageData);
              }
              if (DepthData.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(DepthData);
              }
              if (NormalsData.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(NormalsData);
              }
              if (SegmentationData.Length != 0) {
                size += 1 + pb::CodedOutputStream.ComputeBytesSize(SegmentationData);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(BatchResponseEntry other) {
              if (other == null) {
                return;
              }
              if (other.ImageData.Length != 0) {
                ImageData = other.ImageData;
              }
              if (other.DepthData.Length != 0) {
                DepthData = other.DepthData;
              }
              if (other.NormalsData.Length != 0) {
                NormalsData = other.NormalsData;
              }
              if (other.SegmentationData.Length != 0) {
                SegmentationData = other.SegmentationData;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    ImageData = input.ReadBytes();
                    break;
                  }
                  case 18: {
                    DepthData = input.ReadBytes();
                    break;
                  }
                  case 26: {
                    NormalsData = input.ReadBytes();
                    break;
                  }
                  case 34: {
                    SegmentationData = input.ReadBytes();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class AuxiliaryBoolStreamEntry : pb::IMessage<AuxiliaryBoolStreamEntry> {
        private static readonly pb::MessageParser<AuxiliaryBoolStreamEntry> _parser = new pb::MessageParser<AuxiliaryBoolStreamEntry>(() => new AuxiliaryBoolStreamEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuxiliaryBoolStreamEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Orrb.RenderBatchResponse.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryBoolStreamEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryBoolStreamEntry(AuxiliaryBoolStreamEntry other) : this() {
          name_ = other.name_;
          data_ = other.data_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryBoolStreamEntry Clone() {
          return new AuxiliaryBoolStreamEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private static readonly pb::FieldCodec<bool> _repeated_data_codec
            = pb::FieldCodec.ForBool(18);
        private readonly pbc::RepeatedField<bool> data_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> Data {
          get { return data_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuxiliaryBoolStreamEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuxiliaryBoolStreamEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!data_.Equals(other.data_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= data_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          data_.WriteTo(output, _repeated_data_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += data_.CalculateSize(_repeated_data_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuxiliaryBoolStreamEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          data_.Add(other.data_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                data_.AddEntriesFrom(input, _repeated_data_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class AuxiliaryIntStreamEntry : pb::IMessage<AuxiliaryIntStreamEntry> {
        private static readonly pb::MessageParser<AuxiliaryIntStreamEntry> _parser = new pb::MessageParser<AuxiliaryIntStreamEntry>(() => new AuxiliaryIntStreamEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuxiliaryIntStreamEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Orrb.RenderBatchResponse.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryIntStreamEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryIntStreamEntry(AuxiliaryIntStreamEntry other) : this() {
          name_ = other.name_;
          data_ = other.data_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryIntStreamEntry Clone() {
          return new AuxiliaryIntStreamEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_data_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> data_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Data {
          get { return data_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuxiliaryIntStreamEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuxiliaryIntStreamEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!data_.Equals(other.data_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= data_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          data_.WriteTo(output, _repeated_data_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += data_.CalculateSize(_repeated_data_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuxiliaryIntStreamEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          data_.Add(other.data_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                data_.AddEntriesFrom(input, _repeated_data_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class AuxiliaryFloatStreamEntry : pb::IMessage<AuxiliaryFloatStreamEntry> {
        private static readonly pb::MessageParser<AuxiliaryFloatStreamEntry> _parser = new pb::MessageParser<AuxiliaryFloatStreamEntry>(() => new AuxiliaryFloatStreamEntry());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AuxiliaryFloatStreamEntry> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Orrb.RenderBatchResponse.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryFloatStreamEntry() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryFloatStreamEntry(AuxiliaryFloatStreamEntry other) : this() {
          name_ = other.name_;
          data_ = other.data_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AuxiliaryFloatStreamEntry Clone() {
          return new AuxiliaryFloatStreamEntry(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "data" field.</summary>
        public const int DataFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_data_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> data_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Data {
          get { return data_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as AuxiliaryFloatStreamEntry);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AuxiliaryFloatStreamEntry other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if(!data_.Equals(other.data_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          hash ^= data_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          data_.WriteTo(output, _repeated_data_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          size += data_.CalculateSize(_repeated_data_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AuxiliaryFloatStreamEntry other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          data_.Add(other.data_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18:
              case 21: {
                data_.AddEntriesFrom(input, _repeated_data_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class UpdateRequest : pb::IMessage<UpdateRequest> {
    private static readonly pb::MessageParser<UpdateRequest> _parser = new pb::MessageParser<UpdateRequest>(() => new UpdateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orrb.RenderServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest(UpdateRequest other) : this() {
      components_ = other.components_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateRequest Clone() {
      return new UpdateRequest(this);
    }

    /// <summary>Field number for the "components" field.</summary>
    public const int ComponentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Orrb.RendererComponent> _repeated_components_codec
        = pb::FieldCodec.ForMessage(10, global::Orrb.RendererComponent.Parser);
    private readonly pbc::RepeatedField<global::Orrb.RendererComponent> components_ = new pbc::RepeatedField<global::Orrb.RendererComponent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Orrb.RendererComponent> Components {
      get { return components_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!components_.Equals(other.components_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= components_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      components_.WriteTo(output, _repeated_components_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += components_.CalculateSize(_repeated_components_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateRequest other) {
      if (other == null) {
        return;
      }
      components_.Add(other.components_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            components_.AddEntriesFrom(input, _repeated_components_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateResponse : pb::IMessage<UpdateResponse> {
    private static readonly pb::MessageParser<UpdateResponse> _parser = new pb::MessageParser<UpdateResponse>(() => new UpdateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Orrb.RenderServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse(UpdateResponse other) : this() {
      errors_ = other.errors_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateResponse Clone() {
      return new UpdateResponse(this);
    }

    /// <summary>Field number for the "errors" field.</summary>
    public const int ErrorsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_errors_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> errors_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Errors {
      get { return errors_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!errors_.Equals(other.errors_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= errors_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      errors_.WriteTo(output, _repeated_errors_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += errors_.CalculateSize(_repeated_errors_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateResponse other) {
      if (other == null) {
        return;
      }
      errors_.Add(other.errors_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            errors_.AddEntriesFrom(input, _repeated_errors_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
